
remove_ShowIn () {
	if [ -e /etc/xdg/autostart/$1.desktop ]; then
		sed -i '/^\(Not\|Only\)ShowIn/d' /etc/xdg/autostart/$1.desktop
	fi
}

post_upgrade() {
# disabling some Upstart services
#for F in plymouth-shutdown prefdm splash-manager start-ttys tty ; do
#	if [ -e /etc/init/$F.conf ]; then
#		mv -f /etc/init/$F.conf /etc/init/$F.conf.disabled
#	fi
#done

echo "Disableing xdg/autostart applications"

# don't want it at all
for F in abrt-applet deja-dup-monitor imsettings-start krb5-auth-dialog pulseaudio restorecond sealertauto gnome-power-manager gnome-sound-applet gnome-screensaver orca-autostart; do
	if [ -e /etc/xdg/autostart/$F.desktop ]; then
		remove_ShowIn $F
		echo 'NotShowIn=QUBES;' >> /etc/xdg/autostart/$F.desktop
	fi
done

# don't want it in DisposableVM
for F in gcm-apply ; do
	if [ -e /etc/xdg/autostart/$F.desktop ]; then
		remove_ShowIn $F
		echo 'NotShowIn=DisposableVM;' >> /etc/xdg/autostart/$F.desktop
	fi
done

# want it in AppVM only
for F in gnome-keyring-gpg gnome-keyring-pkcs11 gnome-keyring-secrets gnome-keyring-ssh gnome-settings-daemon user-dirs-update-gtk gsettings-data-convert ; do
	if [ -e /etc/xdg/autostart/$F.desktop ]; then
		remove_ShowIn $F
		echo 'OnlyShowIn=GNOME;AppVM;' >> /etc/xdg/autostart/$F.desktop
	fi
done

# remove existing rule to add own later
for F in gpk-update-icon nm-applet ; do
	remove_ShowIn $F
done

echo 'OnlyShowIn=GNOME;UpdateableVM;' >> /etc/xdg/autostart/gpk-update-icon.desktop || :
echo 'OnlyShowIn=GNOME;NetVM;' >> /etc/xdg/autostart/nm-applet.desktop || :

# TODO deals with NetworkManager configuration (only required in netvm).

# Remove ip_forward setting from sysctl, so NM will not reset it
sed 's/^net.ipv4.ip_forward.*/#\0/'  -i /etc/sysctl.conf

# Install firmware link only on system which haven't it yet
if ! [ -e /lib/firmware/updates ]; then
  ln -s /lib/modules/firmware /lib/firmware/updates
fi

# TODO prevent kernel updates

}

post_install() {

# TODO disable SELinux (by creating /etc/selinux/config ?)

# Remove most of the udev scripts to speed up the VM boot time
# Just leave the xen* scripts, that are needed if this VM was
# ever used as a net backend (e.g. as a VPN domain in the future)
#echo "--> Removing unnecessary udev scripts..."
mkdir -p /var/lib/qubes/removed-udev-scripts
for f in /etc/udev/rules.d/*
do
    if [ $(basename $f) == "xen-backend.rules" ] ; then
        continue
    fi

    if [ $(basename $f) == "xend.rules" ] ; then
        continue
    fi

    if [ $(basename $f) == "50-qubes_misc.rules" ] ; then
        continue
    fi

    if [ $(basename $f) == "99-qubes_network.rules" ] ; then
        continue
    fi

    if [ $(basename $f) == "99-qubes_block.rules" ] ; then
        continue
    fi

    if [ $(basename $f) == "99-qubes_usb.rules" ] ; then
        continue
    fi

    if [ $(basename $f) == "90-hal.rules" ] ; then
        continue
    fi


    mv $f /var/lib/qubes/removed-udev-scripts/
done

mkdir -p /rw


echo "Enabling default qubes services..."
for srv in qubes-dvm qubes-meminfo-writer qubes-qrexec-agent qubes-sysinit qubes-ensure-lib-modules qubes-misc-post qubes-netwatcher qubes-network qubes-firewall qubes-yum-proxy; do
    systemctl enable $srv.service 2> /dev/null
done

echo "Enabling qubes-update-check..."
systemctl enable qubes-update-check.timer 2> /dev/null

# Install overriden services only when original exists
echo "Install overriden services only if original exists..."
for srv in cups NetworkManager ntpd; do
    if [ -f /lib/systemd/system/$srv.service ]; then
        cp /usr/lib/qubes/init/$srv.service /etc/systemd/system/$srv.service
    fi
done

# Set default "runlevel"
echo "Set default runlevel..."
rm -f /etc/systemd/system/default.target
ln -s /lib/systemd/system/multi-user.target /etc/systemd/system/default.target

#chkconfig stuff is specific to redhad
#for f in /etc/init.d/*
#do
#        srv=`basename $f`
#        [ $srv = 'functions' ] && continue
#        [ $srv = 'killall' ] && continue
#        [ $srv = 'halt' ] && continue
#        [ $srv = 'single' ] && continue
#        [ $srv = 'reboot' ] && continue
#        [ $srv = 'qubes_gui' ] && continue
#        chkconfig $srv off 2> /dev/null
#done


echo "Creating the qubes user..."
useradd -m -G users -g wheel -s /bin/zsh user

echo "Disable unnessesary services (lot of them)..."

DISABLE_SERVICES="alsa-store alsa-restore auditd avahi backuppc cpuspeed crond"
DISABLE_SERVICES="$DISABLE_SERVICES fedora-autorelabel fedora-autorelabel-mark ipmi hwclock-load hwclock-save"
DISABLE_SERVICES="$DISABLE_SERVICES mdmonitor multipathd openct rpcbind mcelog fedora-storage-init fedora-storage-init-late"
DISABLE_SERVICES="$DISABLE_SERVICES plymouth-start plymouth-read-write plymouth-quit plymouth-quit-wait"
DISABLE_SERVICES="$DISABLE_SERVICES sshd tcsd sm-client sendmail mdmonitor-takeover"
for srv in $DISABLE_SERVICES; do
    if [ -f /lib/systemd/system/$srv.service ]; then
        if fgrep -q '[Install]' /lib/systemd/system/$srv.service; then
            systemctl disable $srv.service 2> /dev/null
        else
            # forcibly disable
            ln -sf /dev/null /etc/systemd/system/$srv.service
        fi
    fi
done

echo "Remove tty targets..."
echo "Will break your system if qubes is not installed correctly"
echo "You should run it yourself:"
echo "rm -f /etc/systemd/system/getty.target.wants/getty@tty*.service"

# Enable some services
echo "Enable/Disable core network services..."
systemctl enable iptables.service 2> /dev/null
systemctl enable ip6tables.service 2> /dev/null
systemctl enable rsyslog.service 2> /dev/null
#systemctl enable ntpd.service 2> /dev/null
# Disable original service to enable overriden one
#systemctl disable NetworkManager.service 2> /dev/null
# Disable D-BUS activation of NetworkManager - in AppVm it causes problems (eg PackageKit timeouts)
#systemctl mask dbus-org.freedesktop.NetworkManager.service 2> /dev/null
#systemctl enable NetworkManager.service 2> /dev/null

# Enable cups only when it is real SystemD service
#[ -e /lib/systemd/system/cups.service ] && systemctl enable cups.service 2> /dev/null

echo "Adding xen and qubes specific fstab entries..."
echo "xen		/proc/xen	xenfs	defaults	0 0" >> /etc/fstab
echo "/dev/xvdi		/mnt/removable	auto	noauto,user,rw	0 0" >> /etc/fstab

post_upgrade

}

post_remove() {
echo "Disabling qubes services..."
for srv in qubes-dvm qubes-meminfo-writer qubes-qrexec-agent qubes-sysinit qubes-misc-post qubes-netwatcher qubes-network; do
    systemctl disable $srv.service
done

}

# vim:set ts=2 sw=2 et: